https://betterprogramming.pub/how-to-authentication-users-with-token-in-a-react-application-f99997c2ee9d


from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.permissions import IsAuthenticated


class PostListCreateView(APIView):

    """
        a view for creating and listing posts
    """

    serializer_class = PostSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]


class PostListCreateView(APIView):

    """
        a view for creating and listing posts
    """

    serializer_class = PostSerializer
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    # GET ALL POSTS AT /posts/ 'GET'
    def get(self, request:Request, *args, **kwargs):
        posts = Post.objects.all()

        # In this case, the 'instance' is going to be the data that we are returning
        # the 'many' argument will tell the serializer to return a list of data for all of the posts in our database
        serializer=self.serializer_class(instance=posts, many=True)

        return Response(data=serializer.data, status=status.HTTP_200_OK)

    # ADD A NEW POST AT /posts/ 'POST'
    def post(self, request:Request, *args, **kwargs):
        data = request.data

        print(request.data)

        # self.serializer_class was defined to be PostSerializer at the top of our class view
        serializer = self.serializer_class(data=data)

        if serializer.is_valid():
            serializer.save()

            response = {
                "message": "Post Created",
                "data": serializer.data
            }

            return Response(data=response, status=status.HTTP_201_CREATED)
        
        return Response(data=serializer.errors, status=status.HTTP_400_BAD_REQUEST)



export function createPost(postData) {
    console.log(postData)
    return sendRequest(`${BASE_URL}/`, 'POST', postData)
}


urlpatterns = [
    path('posts/', views.PostListCreateView.as_view(), name='posts_list_create'),
    path('posts/<int:post_id>/', views.PostRetrieveUpdateDeleteView.as_view(), name="post_detail")
]