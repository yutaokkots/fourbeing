#############
## USEFUL COMMANDS
run server
    % python3 manage.py runserver
    % python3 manage.py runserver 8080
create new project
    % django-admin startproject my_site
create new app inside my_site
    % python3 manage.py startapp my_app
synchronize model with the database (migration. first two are crucial)
    % python3 manage.py makemigrations my_app 
    % python3 manage.py migrate
    % python3 manage.py sqlmigrate polls 0001
create super user for admin
    % python3 manage.py createsuperuser    
collect static files for project
    % python3 manage.py collectstatic

(postgresql)
create a new db
    % createdb db_name
delete db
    % dropdb 

#############
## PRE-SETUP
**** Only if Django and psycopg2 are not installed
* psycopg2 - library that enables Python applications to interface with PostgreSQL

    % pip3 install Django
    % pip3 install psycopg2-binary

#############
## SETUP
**** To create a local PostgreSQL database
    % createdb db_name

    % django-admin startproject mysite

    .
    ├── manage.py
    └── mysite
        ├── __init__.py
        ├── asgi.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py

    + The outer mysite/ root directory is a container for your project.
    + manage.py: A command-line utility that lets you interact with this Django project in various ways;
        used to perform various tasks related to managing the application, such as running the development server, creating database tables, and managing migrations.
    + The inner mysite/ directory is the actual Python package for your project; 
        special file that is executed when the app is imported and is used to define the app's configuration and specify any initialization code that needs to be run when the app is loaded.
    + mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package.
    + mysite/settings.py: Settings/configuration for this Django project;
        is a configuration file that contains various settings and options that control the behavior of the application, 
        such as database settings, middleware configuration, and installed apps.
    + mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. 
        file in a Django app maps URL patterns to corresponding views, allowing the app to respond to incoming requests from a user's web browser.
    + mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
    + mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.

#############
## APP SETUP
** An app is a web application that does something. A project is a collection of configuration and apps for a particular website. 
A project can contain multiple apps. An app can be in multiple projects.
** Run the following command to initialize the site and verify the server works
    % python3 manage.py runserver

** Run the following command to create the Django App inside the Django project
    % python3 manage.py startapp polls
    .
    ├── db.sqlite3
    ├── manage.py
    ├── polls
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── migrations
    │   │   └── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py
    └── mysite
        ├── __init__.py
        ├── asgi.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py

############
## VIEWS SETUP
https://docs.djangoproject.com/en/4.2/intro/tutorial01/#creating-the-polls-app:~:text=the%20Polls%20app-,¶,-Now%20that%20your

############
## SETTINGS SETUP -> DATABASE SETUP
https://docs.djangoproject.com/en/4.2/intro/tutorial02/
https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-DATABASES

** change the database settings to connect to the appropriate database
-> 'mysite/settings.py'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',  <--- change
            'NAME':'polls',                             <--- change
        }
    }

** initialize a database table for use
    % python3 manage.py migrate

** Create models in 'mysite/polls/models.py'
->  'mysite/polls/models.py'
https://docs.djangoproject.com/en/4.2/intro/tutorial02/

** change the settings.py file, under INSTALLED_APPS to specifiy the apps used in this project,
    allows Django to include the polls app.
-> 'mysite/settings.py'

    INSTALLED_APPS = [
        "polls.apps.PollsConfig", <-- add this
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

** after introducing changes to the models, run the following to integrate the changes 
    and store them as a 'migration' - where 'migration' stores the changes to the models. 
        .
    ├── db.sqlite3
    ├── manage.py
    ├── polls
    │   ├── __init__.py
    │   ├── __pycache__
    │   │   ├── __init__.cpython-311.pyc
    │   │   ├── admin.cpython-311.pyc
    │   │   ├── apps.cpython-311.pyc
    │   │   ├── models.cpython-311.pyc
    │   │   ├── urls.cpython-311.pyc
    │   │   └── views.cpython-311.pyc
    │   ├── admin.py
    │   ├── apps.py
    │   ├── migrations
    │   │   ├── 0001_initial.py         <-- stores changes to models here
    │   │   ├── __init__.py
    │   │   └── __pycache__
    │   │       ├── 0001_initial.cpython-311.pyc
    │   │       └── __init__.cpython-311.pyc
    │   ├── models.py
    │   ├── tests.py
    │   ├── urls.py
    │   └── views.py

** run the migrations and outputs SQL
    % python3 manage.py sqlmigrate polls 0001


############
## Project's 'urls.py' SETUP
'mysite/mysite/urls.py'
    from django.contrib import admin
    from django.urls import include, path

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('main_app.urls')),
    ]

## App's 'urls.py' SETUP
'mysite/polls/urls.py'
    from django.urls import path
    from . import views

    urlpatterns = [
        
    ]

***** Play with build-in Django applications
* environment variables - variables availabe to a program/application dynamically during runtime, any variables that are not hard-coded into the program. Reasons: separation of concerns, maintaining independent configuration sets, securing secrets

* Difference between:
    % python3                   <- runs the program
        and
    % python3 manage.py shell   <- makes available the Python import path to mysite/settings.py

* give the Question instance a couple of Choice instances. 
.create()
The create call constructs a new Choice object, does the INSERT statement, adds the choice to the set of available choices and returns the new Choice object. 

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.

        (reference to the Choice and Question schemas in 'polls/models.py' file)
    >>> from polls.models import Choice, Question
        (.all() <- lists all instances of the Questions class)
    >>> Question.objects.all()
    >>> from django.utils import timezone
        (instantiating the Question class)
    >>> q = Question(question_text="What's new?", pub_date=timezone.now())
        (.save() <- saves to db)  
    >>> q.save()
        (access attributes in the instantiated object, q, from the Question class)
    >>> q.id
    >>> q.question_text
    >>> q.pub_date
        (change an attribute, and save)
    >>> q.question_text = "What's new?!"
    >>> q.save()

        (filters the objects that are instances of the Question class)
    >>> Question.objects.filter(id=1)
    <Question: What's new?!>
        (filters and returns: *** note the double-underscore before the conditional expression)
    >>> Question.objects.filter(question_text__startswith="What)
    <Question: What's new?!>
        (defines a 'current_year', and filters the objects)
    >>> current_year = timezone.now().year    
    >>> Question.objects.filter(pub_date__year=current_year)
    <Question: What's new?!>
        (.get() <- retrives and returns the object from the Question class instance, and assigns to variable q)
    >>> q = Question.objects.get(pk=1)
        (executes the function 'was_published_recently()', which was defined in the Question class)
    >>> q.was_published_recently()
        (.create() <- construcs a new object, does the sql INSERT statement, adds the instance to available instances, and returns the object)
    >>> q.choice_set.create(choice_text="Not much", votes=0)
    >>> q.choice_set.create(choice_text="The sky", votes=0)
    >>> c = q.choice_set.create(choice_text="Just hackin' again", votes=0)
        (the returned object is accesible)
    >>> c.question
    <Question: What's new?!>
    >>> q.choice_set.all()
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hackin' again>]>
    >>> q.choice_set.count()
    3
        (find all instances of Choice class, where the question is filtered by pub_date where the year=current_year)
    >>> Choice.objects.filter(question__pub_date__year=current_year)
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
        (.delete() <- delete one of the choices)
    >>> c=q.choice_set.filter(choice_text__startswith='Just hack')
    >>> c
    <QuerySet [<Choice: Just hacking again>]>
    >>> c.delete()
    (1, {'polls.Choice': 1})


#############
## Create Admin user, and access http://localhost:8000/admin/

    User@User mysite % python3 manage.py createsuperuser
    Username (leave blank to use 'user'): admin
    Email address: 
    Password: 
    Password (again): 

#############
## Views

def function_name(request, parameter):
    return HttpResponse(output)

** Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404
** In order do so, allow the view to provide an HttpResponse object that is not hard-coded into the view. 

#############
## Templates
** create a 'templates' directory in the app, incorporating namespacing. 

    .(this is an incomplete tree for reference purposes)
    ├── README.md
    ├── db.sqlite3
    ├── manage.py
    ├── polls
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── migrations
    │   │   ├── 0001_initial.py
    │   │   ├── __init__.py
    │   │   └── __pycache__
    │   │       ├── 0001_initial.cpython-311.pyc
    │   │       └── __init__.cpython-311.pyc
    │   ├── models.py
    │   ├── templates           <- create a templates directory in the app, and another directory, with an index.html
    │   │   └── polls
    │   │       └── index.html  <- name-spaced file
    │   ├── tests.py
    │   ├── urls.py
    │   └── views.py

    Reason for namespacing like above:
    ./polls/templates/polls/index.html    <- recommemded
    ./polls/tempaltes/index.html          <- not recommended
    If you had a template with the same name in a different application,
    because Django will choose the first template it finds whose name matches, Django 
    would be unable to distinguish them. The best way to ensure that the correct file is accessed is by namespacing the files - putting those templates inside another directory named for the application itself.



#############
## forms

<form 
    action="{% url 'polls:vote' question.id %}"
    method="post">
    {% csrf_token %}
    <fieldset>
        <legend><h1>{{ question.question_text }}</h1></legend>
        {% if error_message %}
            <p><strong>{{ error_message }}</strong></p> 
        {% endif %}
        {% for choice in question.choice_set.all %}
            <input 
                type="radio"
                name="choice"
                id="choice {{ forloop.counter }}"
                value="{{ choice.id }}">
            <label 
                for="choice {{ forloop.counter }}">
                    {{ choice.choice_text }}
            </label>
            <br>
        {% endfor %}
    </fieldset>
    <input 
        type="submit"
        value="Vote">
</form>

## Generic views
Sometimes, code can be redundant. Views represent a common case of basic web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the “generic views” system.

Generic views abstract common patterns to the point where you don’t even need to write Python code to write an app.

Let’s convert our poll app to use the generic views system, so we can delete a bunch of our own code. We’ll have to take a few steps to make the conversion. We will:

Convert the URLconf.
Delete some of the old, unneeded views.
Introduce new views based on Django’s generic views.