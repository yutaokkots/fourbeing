User States and tokens
A user state is changed only when:
    1. The React app is loaded or refreshed.
    2. A visitor signs up.
    3. A user logs in.
    4. The user logs out.

Each browser is a different client. So token storage is limited to the session in each browser.
In the client-side Local Storage, the token is saved as key:value pair
Steps to consider with changing user state. Code is written here: 'utilities/users_service.js'
1. Get Token (should return the user state)
    a) look for token in client-side (localStorage.getItem('token'))
    b) if token exists (in local storage), -> return token
    c) if token does not exist (in local storage), -> return null
    d) if the found token is expired, then remove it from local storage, and -> return null
    e) else if the token has not expired
        -> return: extracted user object from payload
    f) update the token expiration date

    export function getToken() {
            // getItem returns null if there's no string
        const token = localStorage.getItem('token');
        if (!token) return null;
            // Obtain the payload of the token
        const payload = JSON.parse(atob(token.split('.')[1]));
            // A JWT's exp is expressed in seconds, not milliseconds, so convert
        if (payload.exp < Date.now() / 1000) {
                // Token has expired - remove it from localStorage
            localStorage.removeItem('token');
            return null;
        }
        return token;
    }

    export function getUser() {
        const token = getToken();
        // If there's a token, return the user in the payload, otherwise return null
        return token ? JSON.parse(atob(token.split('.')[1])).user : null;
    }

2. 
1. set a token, save it to local storage, grab the token and decode it

Save the token to the Browser's local storage

User-service.js:
handles the sign up and the app logic
persisting the token to local storage occurs here

user-api.js
network and connecting to 