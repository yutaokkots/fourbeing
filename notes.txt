https://m.youtube.com/watch?v=ntgKH7KUaNM
https://github.com/markerikson/react-redux-links
https://www.richardtwatson.com/open/Reader/_book/one-to-one-and-recursive-relationships.html
https://www.digitalocean.com/community/tutorials/build-a-to-do-application-using-django-and-react

Django authentication notes
https://blog.devgenius.io/django-rest-knox-token-authentication-f134760a4a7b
https://james1345.github.io/django-rest-knox/
https://github.com/James1345/django-rest-knox
https://www.django-rest-framework.org/api-guide/authentication/
https://james1345.github.io/django-rest-knox/installation/
https://blog.devgenius.io/django-rest-knox-token-authentication-f134760a4a7b
https://www.youtube.com/watch?app=desktop&v=0d7cIfiydAc
https://stackoverflow.com/questions/48943331/django-restframework-extra-kwargs-not-working


https://medium.com/technest/implement-user-auth-in-a-django-react-app-with-knox-fc56cdc9211c
https://github.com/kjmczk/DjangoReactTodo

https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/

Django-rest_framework-knox
https://www.youtube.com/watch?v=s3jTweZiqfI
https://www.youtube.com/watch?v=0d7cIfiydAc ###

declaring prop types in eslint
https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/prop-types.md
https://www.npmjs.com/package/prop-types

token expiry
https://stackoverflow.com/questions/74307012/how-to-refresh-token-after-expiry-in-django-knox-authentication
https://stackoverflow.com/questions/55538458/django-rest-with-jwt-getting-attributeerror-invalid-api-setting-jwt-payload
Using useContext for auth state
https://blog.devgenius.io/django-rest-framework-react-authentication-workflow-2022-part-2-d299b7fef875
https://testdriven.io/blog/django-spa-auth/

jwt
https://github.com/jod35/Building-APIS-with-DRF/blob/main/posts/apps.py
https://www.youtube.com/watch?v=mm6vlnWXFdM&list=PLEt8Tae2spYlosWRH9JDpKNxzb3bSOJGx&index=8

backend:


create virtual environment and create project
1) in backend folder:
    % python3 -m venv .venv
    % . .venv/bin/activate
    % python3 -m pip install django
    % django-admin startproject backendserver .
    % python3 manage.py runserver

    % touch .gitignore
        make sure to include relevant git-ignore files listed in .gitignore
    % git init

    into virtual environment
    % . .venv/bin/activate
    % python --version
    % pip --version

    install django-rest-framework
        https://www.django-rest-framework.org/
    % pip install django-rest-framework

    % pip freeze > requirements.txt     #save package information
    % pip install -r requirements.txt   #go through file to install packages

2) initialize psql database using 'createdb' command
    # create a new db
    % createdb fourbeing

    # create new app within project
    % python3 manage.py startapp <fourbeing>

    # migrate
    % python3 manage.py migrate

    # add new app, 'fourbeing' (or whatever app name) into settings.py -> 'INSTALLED_APPS' 
            INSTALLED_APPS = [
                'fourbeing',
                ... ]
    # makemigration and migrate
    % python3 manage.py makemigrations <app_name>
    % python3 manage.py migrate <app_name>

3) prepare api endpoint
    # before working on api endpoint for app ('fourbeing'), set up URI endpoint
    #   for the project. backend/backendserver/urls.py

            from django.contrib import admin
            from django.urls import path, include

            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('main_app.urls')),
            ]
    # define urls.py for app ('fourbeing') 
    #   backend/fourbeing/urls.py
            urlpatterns = [
                path('api/test/', views.test, name='test'),
            ]
    #   backend/fourbeing/views.py
        def test(request):
            pass

Django REST framework 
4) prepare serializer, to invoke a serializer to convert db object to json when
    the api endpoint is called
    # 'rest-framework' needs to be installed in .venv, if not done already. (see above for command)
    # add 'rest-framework' to settings.py, INSTALLED_APPS
            INSTALLED_APPS = [
                'rest_framework',
                ... ]
    
    #in fourbeing/serializers.py
            from rest_framework import serializers

    # if the rest-framework is in the .venv, the 'rest_framework' above may be squiggled. 
    # need to notify python of virtual environmant

Django CORS-headers
5) in order to specify the incoming HTTP request and allow the front-end app to access
the uri endpoints of the front end, install Django Cors-headers
https://pypi.org/project/django-cors-headers/
https://github.com/adamchainz/django-cors-headers
    # enter virtual environment
    % . .venv/bin/activate

    # install django-cors-headers
    % pip install django-cors-headers

    # save to requirements.txt
    % pip freeze > requirements.txt

    # update 'settings.py' file: 
    INSTALLED_APPS = [
        'corsheaders',
        . . . ]

    MIDDLEWARE = [
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        . . . ]
    
    CORS_ALLOWED_ORIGINS = [
        'https://sub.example.com',
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ]

INSTALL REACT-APP
    * unlike previous versions of MERN apps, did not include the following:
        - 'MORGAN' <- for server-side debugging. But still not sure. 
        - 'mongoose' <- for MongoDB
        - 'bcrypt'
        - 'jsonwebtoken' <- still unsure about this one. 
6) install React App
    1. % npm create vite@latest
    ✔ Project name: … mern-infrastructure
    ✔ Select a framework: › React
    ✔ Select a variant: › JavaScript
    cd mern-infrastructure
    npm install
    2. install node modules
        % npm i
    3. build out app
        % npm run build
    3. start test server at localhost:5173
        % npm run dev
    4. package.json: DELETE:
    "type": "module", <-- this line needs to be deleted
    5. reorganize:
        A) src/App folder
            move App.jsx and App.css into App folder
        B) PAGES vs COMPONENTS
            Pages are a container of components
            Organization: create two additional folders:
            src/pages
            src/components

        ├── src
            ├── assets
            ├── components
            ├── index.css
            ├── main.jsx
            └── pages
                └── App
                    ├── App.css
                    └── App.jsx
    6. react-router-dom 
        A) install react-router-dom
        % npm i react-router-dom
        B) protect routes: 'frontend/src/main.js'
            import { BrowserRouter as Router } from 'react-router-dom'

            ReactDOM.createRoot(document.getElementById('root')).render(
            <React.StrictMode>
                <Router><App /></Router>
            </React.StrictMode>,
            )

    7. A note with tailwindcss, had to include the following Code  
        at the top of the postcss.config.cjs file and tailwind.config.js
        files, in order for the modules.exports to be read.
        https://stackoverflow.com/questions/70973306/how-to-convert-postcss-config-js-and-tailwind-config-js-to-es-modules
        /* eslint-env node */

    8. Set up front end to include proper Pages and componets, and fetch() from backend 
        e.g. by fetching from http://localhost:8000/api/...

INSTALL KNOX for authentication in backend (Django)
7) install rest-knox for token-based authentication. 
    # enter virtual environment
    % . .venv/bin/activate

    # install rest-knox
    % pip install django-rest-knox

    # save to requirements.txt
    % pip freeze > requirements.txt

    #knox set up
        INSTALLED_APPS = [
            ...
            'rest_framework',
            'knox',
            ...
        }



https://lucid.app/lucidchart/7aef38fc-2ce1-4d1b-8a97-8f22d22010bd/edit?invitationId=inv_b2d40ba1-375b-41d7-8a88-12f69dd7125b&page=0_0#



built-in urls for authorization
accounts/login/ [name='login']
accounts/logout/ [name='logout']
accounts/password_change/ [name='password_change']
accounts/password_change/done/ [name='password_change_done']
accounts/password_reset/ [name='password_reset']
accounts/password_reset/done/ [name='password_reset_done']
accounts/reset/<uidb64>/<token>/ [name='password_reset_confirm']
accounts/reset/done/ [name='password_reset_complete']